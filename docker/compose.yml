networks:
  web:
    external: true
  internal:
    external: false

volumes:
  db-data:
    driver: local
  db-config:
    driver: local
  komodo-repos:
    driver: local
  komodo-stacks:
    driver: local
  fooocus_data:
    driver: local
  ollama-ui_data:
    driver: local
  audiocraft_data:
    driver: local
  languagetool_ngrams:
    driver: local
  languagetool_fasttext:
    driver: local
  adguard-work:
    driver: local

  media:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/media"

  ollama:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/ollama"
  uptime-kuma:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/uptimekuma"
  certbot:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/certbot"
  certbot-certs:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/certbot/certificates"
  jellyfin:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/jellyfin-conf"
  acme:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/acme"
  adgaurd-conf:
    driver_opts:
      type: cifs
      o: username=${NETWORK_DRIVE_USERNAME},password=${NETWORK_DRIVE_PASSWORD},vers=3.0,rw
      device: "//${NETWORK_DRIVE}/homelab/adgaurd"

services:
  komodo-core:
    image: ghcr.io/mbecker20/komodo:latest
    restart: always
    depends_on:
      - komodo-mongo
    logging:
      driver: local 
    networks:
      - internal
      - web
    ports:
      - 9120:9120
    env_file: /home/sawyer/compose-files/secrets.env
    environment: 
      KOMODO_TITLE: Komodo 
      KOMODO_ENSURE_SERVER: http://komodo-periphery:8120 # Creates the "default" server.
      KOMODO_MONGO_ADDRESS: komodo-mongo:27017
      KOMODO_LOCAL_AUTH: true 
      KOMODO_GITHUB_OAUTH_ENABLED: true 
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.komodo.entrypoints=http"
      - "traefik.http.routers.komodo.rule=Host(`komodo.${DOMAIN}`)"
      - "traefik.http.middlewares.komodo-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.komodo.middlewares=komodo-https-redirect"
      - "traefik.http.routers.komodo-secure.entrypoints=https"
      - "traefik.http.routers.komodo-secure.rule=Host(`komodo.${DOMAIN}`)"
      - "traefik.http.routers.komodo-secure.tls=true"
      - "traefik.http.routers.komodo-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.komodo-secure.middlewares=forward-auth"

  komodo-periphery:
    image: ghcr.io/mbecker20/periphery:latest
    restart: always
    logging:
      driver: local
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/ru/home/sawyer/compose-files/docker.sock
      - komodo-repos:/etc/komodo/repos:rw 
      - komodo-stacks:/etc/komodo/stacks:rw 
    labels: 
      - "traefik.enable=false"
    

  komodo-mongo:
    image: mongo
    command: --quiet # suppress mongo logs a bit
    restart: always
    logging:
      driver: local
    networks:
      - internal
    ports:
      - 27017:27017
    volumes:
      - db-data:/data/db:rw
      - db-config:/data/configdb:rw
    env_file: /home/sawyer/compose-files/secrets.env
    labels: 
      - "traefik.enable=false"

  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: always
    networks:
      - web
    expose:
      - 11434
    volumes:
      - ollama:/root/.ollama:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.ollama-api.entrypoints=http"
      - "traefik.http.routers.ollama-api.rule=Host(`ollama-api.${DOMAIN}`)"
      - "traefik.http.middlewares.ollama-api-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.ollama-api.middlewares=ollama-api-https-redirect"
      - "traefik.http.routers.ollama-api-secure.entrypoints=https"
      - "traefik.http.routers.ollama-api-secure.rule=Host(`ollama-api.${DOMAIN}`)"
      - "traefik.http.routers.ollama-api-secure.tls=true"
      - "traefik.http.routers.ollama-api-secure.tls.certresolver=${DNS}"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  ollama-ui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-ui
    restart: always
    depends_on:
      - ollama
    networks:
      - web
      - internal
    expose:
      - 8080
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    volumes:
      - ollama-ui_data:/app/backend/data:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.ollama-ui.entrypoints=http"
      - "traefik.http.routers.ollama-ui.rule=Host(`ollama.${DOMAIN}`)"
      - "traefik.http.middlewares.ollama-ui-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.ollama-ui.middlewares=ollama-ui-https-redirect"
      - "traefik.http.routers.ollama-ui-secure.entrypoints=https"
      - "traefik.http.routers.ollama-ui-secure.rule=Host(`ollama.${DOMAIN}`)"
      - "traefik.http.routers.ollama-ui-secure.tls=true"
      - "traefik.http.routers.ollama-ui-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.ollama-ui-secure.middlewares=forward-auth"

  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    restart: always
    networks:
      - web
    ports:
      - 8096:8096/tcp
      - 8920:8920
    env_file: /home/sawyer/compose-files/secrets.env
    volumes:
      - media:/data/media/:ro
      - certbot-certs:/data/certs/:ro
      - jellyfin:/config/:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.jellyfin.entrypoints=http"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN}`)"
      - "traefik.http.middlewares.jellyfin-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.jellyfin.middlewares=jellyfin-https-redirect"
      - "traefik.http.routers.jellyfin-secure.entrypoints=https"
      - "traefik.http.routers.jellyfin-secure.rule=Host(`jellyfin.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin-secure.tls=true"
      - "traefik.http.routers.jellyfin-secure.tls.certresolver=${DNS}"
      - "traefik.http.services.jellyfin-secure.loadbalancer.server.port=8096"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  transmission-openvpn:
    image: haugene/transmission-openvpn
    container_name: transmission-openvpn
    restart: always
    networks:
      - web
    volumes:
      - media:/data:rw
    env_file: /home/sawyer/compose-files/secrets.env
    environment:
      - OPENVPN_OPTS=--pull-filter ignore ifconfig-ipv6
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    ports:
      # any ports needed to expose services through traefik need to be defined here
      - 9091:9091 # transmission
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.transmission.entrypoints=http"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN}`) || Host(`torrent.${DOMAIN}`)"
      - "traefik.http.middlewares.transmission-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.transmission.middlewares=transmission-https-redirect"
      - "traefik.http.routers.transmission-secure.entrypoints=https"
      - "traefik.http.routers.transmission-secure.rule=Host(`transmission.${DOMAIN}`) || Host(`torrent.${DOMAIN}`)"
      - "traefik.http.routers.transmission-secure.tls=true"
      - "traefik.http.routers.transmission-secure.tls.certresolver=${DNS}"
      - "traefik.http.services.transmission-secure.loadbalancer.server.port=9091"
      - "traefik.http.routers.transmission-secure.middlewares=forward-auth"

  rathole:
    image: rapiz1/rathole
    container_name: rathole
    restart: always
    volumes:
      - /home/sawyer/compose-files/docker/rathole/rathole.toml:/app/config.toml:ro
    command: --client /app/config.toml
    labels:
      - "traefik.enable=false"

  traefik:
    image: traefik
    container_name: traefik
    restart: always
    env_file: /home/sawyer/compose-files/secrets.env
    command: |
      traefik 
      --log=true --log.level=INFO
      --api.dashboard=true --api.insecure=true
      --entrypoints.http --entrypoints.http.address=:80
      --entrypoints.https --entrypoints.https.address=:443
      --entrypoints.dnsovertls --entrypoints.dnsovertls.address=:853
      --serverstransport.insecureskipverify=true 
      --entrypoints.http.http.redirections.entrypoint.to=https
      --entrypoints.http.http.redirections.entrypoint.scheme=https
      --providers.docker=true --providers.docker.exposedbydefault=false
      --certificatesresolvers.${DNS}.acme.email=${CF_API_EMAIL}
      --certificatesresolvers.${DNS}.acme.storage=/etc/traefik/acme/acme.json
      --certificatesresolvers.${DNS}.acme.dnschallenge
      --certificatesresolvers.${DNS}.acme.dnschallenge.disablepropagationcheck=false
      --certificatesresolvers.${DNS}.acme.dnschallenge.provider=${DNS}
      --certificatesresolvers.${DNS}.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      --certificatesresolvers.${DNS}.acme.httpchallenge.entrypoint=http
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/ru/home/sawyer/compose-files/docker.sock:/var/ru/home/sawyer/compose-files/docker.sock:ro
      - acme:/etc/traefik/acme:rw
    networks:
      - web
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.routers.treafik-secure.middlewares=forward-auth"

  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    container_name: traefik-auth
    env_file: /home/sawyer/compose-files/secrets.env
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.auth.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.auth.entrypoints=https"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.routers.auth.tls.certresolver=${DNS}"
      - "traefik.http.routers.auth.service=auth@docker"
      - "traefik.http.services.auth.loadbalancer.server.port=4181"
      - "traefik.http.middlewares.forward-auth.forwardauth.address=http://traefik-forward-auth:4181"
      - "traefik.http.middlewares.forward-auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User"
      - "traefik.http.routers.auth.middlewares=forward-auth"

  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: always
    networks:
      - web
    volumes:
      - adgaurd-conf:/opt/adguardhome/conf:rw
      - adguard-work:/opt/adguardhome/work:rw
      - certbot:/opt/adguardhome/certs/:rw
    ports:
      - 3000:3000/tcp
      - "53:53/tcp"
      - "53:53/udp"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.adguard.entrypoints=http"
      - "traefik.http.routers.adguardng.rule=Host(`adguard.${DOMAIN}`) || Host(`adguardhome.${DOMAIN}`)"
      - "traefik.http.middlewares.adguard-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.adguard.middlewares=adguard-https-redirect"
      - "traefik.http.routers.adguard-secure.entrypoints=https"
      - "traefik.http.services.adguard-secure.loadbalancer.server.port=3000"
      - "traefik.http.routers.adguard-secure.rule=Host(`adguard.${DOMAIN}`) || Host(`adguardhome.${DOMAIN}`)"
      - "traefik.http.routers.adguard-secure.tls=true"
      - "traefik.http.routers.adguard-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.adguard-secure.middlewares=forward-auth"

      # DNS-over-TLS
      - traefik.tcp.routers.adguard-dot.rule=HostSNI(`dns.${DOMAIN}`)
      - traefik.tcp.routers.adguard-dot.entrypoints=dnsovertls
      - traefik.tcp.routers.adguard-dot.tls=true
      - traefik.tcp.routers.adguard-dot.service=adguard
      - traefik.tcp.routers.adguard-dot.tls.certresolver=${DNS}
      - traefik.tcp.services.adguard.loadbalancer.server.port=53

  dashy:
    container_name: dashy
    image: lissy93/dashy
    restart: always
    networks:
      - web
    expose:
      - 80
    volumes:
      - /home/sawyer/compose-files/docker/dashy/conf.yml:/app/public/conf.yml:ro
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.dashy.entrypoints=http"
      - "traefik.http.routers.dashy.rule=Host(`dashy.${DOMAIN}`) || Host(`${DOMAIN}`)"
      - "traefik.http.middlewares.dashy-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.dashy.middlewares=dashy-https-redirect"
      - "traefik.http.routers.dashy-secure.entrypoints=https"
      - "traefik.http.routers.dashy-secure.rule=Host(`dashy.${DOMAIN}`) || Host(`${DOMAIN}`)"
      - "traefik.http.routers.dashy-secure.tls=true"
      - "traefik.http.routers.dashy-secure.tls.certresolver=${DNS}"

  registry: # My own docker registry
    container_name: registry
    image: registry
    restart: always
    networks:
      - web
    expose:
      - 5000
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.registry.entrypoints=http"
      - "traefik.http.routers.registry.rule=Host(`registry.${DOMAIN}`)"
      - "traefik.http.middlewares.registry-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.registry.middlewares=registry-https-redirect"
      - "traefik.http.routers.registry-secure.entrypoints=https"
      - "traefik.http.routers.registry-secure.rule=Host(`registry.${DOMAIN}`)"
      - "traefik.http.routers.registry-secure.tls=true"
      - "traefik.http.routers.registry-secure.tls.certresolver=${DNS}"

  searxng:
    image: searxng/searxng
    container_name: searxng
    restart: always
    env_file: /home/sawyer/compose-files/secrets.env
    networks:
      - web
    expose:
      - 8080
    volumes:
      - /home/sawyer/compose-files/docker/searxng:/etc/searxng:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.searxng.entrypoints=http"
      - "traefik.http.routers.searxng.rule=Host(`searxng.${DOMAIN}`) || Host(`searx.${DOMAIN}`) || Host(`search.${DOMAIN}`)"
      - "traefik.http.middlewares.searxng-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.searxng.middlewares=searxng-https-redirect"
      - "traefik.http.routers.searxng-secure.entrypoints=https"
      - "traefik.http.routers.searxng-secure.rule=Host(`searxng.${DOMAIN}`) || Host(`searx.${DOMAIN}`) || Host(`search.${DOMAIN}`)"
      - "traefik.http.routers.searxng-secure.tls=true"
      - "traefik.http.routers.searxng-secure.tls.certresolver=${DNS}"

  smokeping:
    image: lscr.io/linuxserver/smokeping
    container_name: smokeping
    restart: always
    networks:
      - web
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.ping.entrypoints=http"
      - "traefik.http.routers.ping.rule=Host(`ping.${DOMAIN}`) || Host(`smokeping.${DOMAIN}`) "
      - "traefik.http.middlewares.ping-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.ping.middlewares=ping-https-redirect"
      - "traefik.http.routers.ping-secure.entrypoints=https"
      - "traefik.http.routers.ping-secure.rule=Host(`ping.${DOMAIN}`) || Host(`smokeping.${DOMAIN}`) "
      - "traefik.http.routers.ping-secure.tls=true"
      - "traefik.http.routers.ping-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.ping-secure.middlewares=forward-auth"

  languagetool:
    image: meyay/languagetool
    container_name: languagetool
    restart: always
    networks:
      - web
    cap_drop:
      - ALL
    cap_add:
      - CAP_SETUID
      - CAP_SETGID
      - CAP_CHOWN
    security_opt:
      - no-new-privileges
    ports:
      - 8010:8010
    environment:
      download_ngrams_for_langs: en
      langtool_languageModel: /ngrams
      langtool_fasttextModel: /fasttext/lid.176.bin
    volumes:
      - languagetool_ngrams:/ngrams:rw
      - languagetool_fasttext:/fasttext:rw
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.languagetool.entrypoints=http"
      - "traefik.http.routers.languagetool.rule=Host(`languagetool.${DOMAIN}`) || Host(`smokelanguagetool.${DOMAIN}`) "
      - "traefik.http.middlewares.languagetool-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.languagetool.middlewares=languagetool-https-redirect"
      - "traefik.http.routers.languagetool-secure.entrypoints=https"
      - "traefik.http.routers.languagetool-secure.rule=Host(`languagetool.${DOMAIN}`) || Host(`smokelanguagetool.${DOMAIN}`) "
      - "traefik.http.routers.languagetool-secure.tls=true"
      - "traefik.http.routers.languagetool-secure.tls.certresolver=${DNS}"

  # configures a gh action runner to redeploy this file
  homelab-github-runner:
    image: myoung34/github-runner:debian-bookworm
    container_name: homelab-github-runner  
    network_mode: host # allows containers to use tailscale dns
    environment:
      ORG_NAME: LegitCamper
      REPO_URL: https://github.com/LegitCamper/homelab
      ACCESS_TOKEN: ${SELF_HOSTED_RUNNER}
    labels:
      - "traefik.enable=true"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/ru/home/sawyer/compose-files/docker.sock:/var/ru/home/sawyer/compose-files/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_REVIVE_STOPPED: true
      WATCHTOWER_POLL_INTERVAL: 604800 # every 7 days
    command: --cleanup
    restart: always
    labels:
      - "traefik.enable=false"

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: always
    volumes:
      - uptime-kuma:/app/data:rw
    expose:
      - 3001
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.ping.entrypoints=http"
      - "traefik.http.routers.ping.rule=Host(`uptime-kuma.${DOMAIN}`)"
      - "traefik.http.middlewares.ping-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.ping.middlewares=ping-https-redirect"
      - "traefik.http.routers.ping-secure.entrypoints=https"
      - "traefik.http.routers.ping-secure.rule=Host(`uptime-kuma.${DOMAIN}`)"
      - "traefik.http.routers.ping-secure.tls=true"
      - "traefik.http.routers.ping-secure.tls.certresolver=${DNS}"
      - "traefik.http.routers.ping-secure.middlewares=forward-auth"

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   ports:
  #     - 9004:9090
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   volumes:
  #     - /home/sawyer/compose-files/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   depends_on:
  #     - cadvisor
  #   restart: always

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor
  #   container_name: cadvisor
  #   ports:
  #     - 9005:8080
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/li/home/sawyer/compose-files/docker/:/var/li/home/sawyer/compose-files/docker:ro
  #   restart: always

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #    - 9006:3000
  #   restart: always
