networks:
  web:
    external: true
  internal:
    external: false
  # This network exists just so adugard can have a static ip for tcp routing
  dns:
    ipam:
      config:
        - subnet: 172.55.0.0/24

volumes:
  fooocus_data:
    driver: local
  jellyfin-config:
    driver: local
  jellyfin-cache:
    driver: local
  adguard-work:
    driver: local

services:
  ollama:
    image: ghcr.io/open-webui/open-webui:ollama
    container_name: ollama
    restart: always
    networks:
      - web
    expose:
      - 8080
    volumes:
      - /mnt/homelab/ollama:/root/.ollama:rw
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8096
    volumes:
      - jellyfin-config:/config:rw
      - jellyfin-cache:/cache:rw
      - /mnt/media:/data/media/:ro
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  transmission-openvpn:
    image: haugene/transmission-openvpn
    container_name: transmission
    restart: always
    networks:
      - web
    volumes:
      - /mnt/media:/data:rw
    environment:
      - OPENVPN_OPTS=--pull-filter ignore ifconfig-ipv6
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - CREATE_TUN_DEVICE=true
    security_opt:
      - label=disable
    cap_add:
      - NET_ADMIN
      - MKNOD
    ports:
      # any services proxied through this container need to declare ports here
      - 9091:9091 # transmission
    devices:
      - /dev/net/tun

  rathole:
    image: rapiz1/rathole
    container_name: rathole
    restart: always
    network_mode: host
    volumes:
      - /home/core/compose-files/docker/rathole/rathole.toml:/app/config.toml:ro
    command: --client /app/config.toml

  traefik:
    image: traefik
    container_name: traefik
    restart: always
    user: "1000:1000"
    environment:
      - CF_API_KEY=${CF_API_KEY}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - DNS=${DNS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/core/acme/:/etc/traefik/acme:rw
      - /home/core/compose-files/docker/traefik/static.toml:/etc/traefik/traefik.toml:ro
      - /home/core/compose-files/docker/traefik/dynamic.toml:/etc/traefik/dynamic.toml:ro
    networks:
      - web
      - dns
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
    expose:
      - "8080:8080"

  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: always
    # user: "1000:1000"
    networks:
      dns: 
        ipv4_address: 172.55.0.10 
    volumes:
      - /mnt/homelab/adgaurd:/opt/adguardhome/conf:rw
      - adguard-work:/opt/adguardhome/work:Z
      - /mnt/homelab/letsencrypt:/opt/adguardhome/certs/:ro
    expose:
      - 80 # webui
      - 53 # dns - not used
      - 853 # dot
      - 443 # doh

  lego:
    image: goacme/lego
    container_name: lego-certbot
    restart: always
    user: "1000:1000"
    environment:
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_API_KEY=${CF_API_KEY}
    command:
      --accept-tos
      --email ${CF_API_EMAIL} --dns cloudflare 
      --domains dns.${DOMAIN} --path /etc/letsencrypt/ 
      run
    volumes:
      - /mnt/homelab/letsencrypt:/etc/letsencrypt:rw

  searxng:
    image: searxng/searxng
    container_name: searxng
    restart: always
    user: "1000:1000"
    environment:
      - SEARXNG_SECRET=${SEARXNG_SECRET}
    networks:
      - web
    expose:
      - 8080
    volumes:
      - /home/core/compose-files/docker/searxng:/etc/searxng:rw

  smokeping:
    image: lscr.io/linuxserver/smokeping
    container_name: smokeping
    restart: always
    networks:
      - web
    expose:
      - 80

  languagetool:
    image: meyay/languagetool
    container_name: languagetool
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8010
    environment:
      download_ngrams_for_langs: en
      langtool_languageModel: /ngrams
      langtool_fasttextModel: /fasttext/lid.176.bin
    volumes:
      - /mnt/homelab/languagetool/ngrams:/ngrams:rw
      - /mnt/homelab/languagetool/fasttext:/fasttext:rw

  # configures a gh action runner to redeploy this file
  homelab-github-runner:
    image: myoung34/github-runner:debian-bookworm
    container_name: homelab-github-runner  
    network_mode: host # allows containers to use tailscale dns
    environment:
      ORG_NAME: LegitCamper
      REPO_URL: https://github.com/LegitCamper/homelab
      ACCESS_TOKEN: ${SELF_HOSTED_RUNNER}
    restart: always

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_REVIVE_STOPPED: true
      WATCHTOWER_POLL_INTERVAL: 604800 # every 7 days
    restart: always

  mysql:
    image: library/mysql:8.0
    container_name: mysql
    restart: always
    networks:
      - internal
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - /mnt/homelab/mysql:/var/lib/mysql:rw
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: "panel"
      MYSQL_USER: "pterodactyl"

  cache:
    image: redis:alpine
    container_name: mysql-cache
    restart: always
    networks:
      - internal

  pterodactyl:
    image: ghcr.io/pterodactyl/panel:v1.11.10
    container_name: pterodactyl
    restart: always
    user: "1000:1000"
    networks:
      - web
      - internal
    links:
      - mysql
      - cache
    volumes:
      - /mnt/homelab/Pterodactyl/var/:/app/var/:rw
      - /mnt/homelab/Pterodactyl/logs/:/app/storage/logs:rw
      - /mnt/homelab/Pterodactyl/nginx/:/etc/nginx/conf.d/:rw
    environment:
      DB_PASSWORD: ${MYSQL_PASSWORD}
      APP_ENV: "production"
      APP_ENVIRONMENT_ONLY: "false"
      CACHE_DRIVER: "redis"
      SESSION_DRIVER: "redis"
      QUEUE_DRIVER: "redis"
      REDIS_HOST: "cache"
      DB_HOST: "mysql"
      TRUSTED_PROXIES: "*"

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: always
    user: "1000:1000"
    volumes:
      - /mnt/homelab/uptimekuma:/app/data:rw
    expose:
      - 3001

  portfolio:
    image: ghcr.io/legitcamper/portfolio-site:latest
    container_name: portfolio
    restart: always
    networks:
      - web
    expose:
        - 8000

  mom-contact:
    image: ghcr.io/legitcamper/mom-contact:latest
    container_name: mom-contact
    restart: always
    networks:
      - web
    expose:
        - 8000
