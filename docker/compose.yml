networks:
  # exposed through traefik
  web:
    external: true
  # Not exposed via traefik (dbs & severices
  internal: 
    external: false
  # This network exists just so adugard can have a static ip for tcp routing
  dns:
    ipam:
      config:
        - subnet: 172.55.0.0/24

volumes:
  logs:
  jellyfin-config:
  jellyfin-cache:
  adguard-work:
  fileflows-temp:

services:
  fileflows:
    container_name: fileflows
    image: revenz/fileflows
    restart: always
    networks:
      - web
    expose:
      - 5000
    environment:
      - TZ=${TZ}
      - PUID=1000
      - PGID=1000
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - fileflows-temp:/temp:rw
      - /mnt/homelab/fileflows/configs:/app/Data:rw
      - /mnt/media/movies:/media/movies:rw
      - /mnt/media/shows:/media/shows:rw
      - /mnt/media/music:/media/music:rw
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        limits:
          memory: 15G
        reservations:
          devices:
          - driver: nvidia
            capabilities: [gpu]
            count: all          

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8096
    volumes:
      - jellyfin-config:/config:rw
      - jellyfin-cache:/cache:rw
      - /mnt/media:/data/media/:rw
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          memory: 20G
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  flaresolverr:
    # use fork as flaresolverr is not working
    image: ghcr.io/yoori/flare-bypasser
    container_name: flaresolverr
    networks:
      - internal
    environment:
      UNUSED: "false"
      DEBUG: "false"
      VERBOSE: "true"
      SAVE_CHALLENGE_SCREENSHOTS: "true"
    expose:
      - 8080
    restart: always

  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
      - PORT_FORWARD_ONLY=${PORT_FORWARD_ONLY}
      - VPN_PORT_FORWARDING=${VPN_PORT_FORWARDING}
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/gluetun:/gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    networks:
      - web
      - internal
    expose:
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
      - 9091 # transmission

  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    restart: always
    network_mode: "service:gluetun"
    volumes:
      - /mnt/homelab/transmission:/config:rw
      - /mnt/media:/data:rw
    environment:
      - DOCKER_MODS=ghcr.io/michsior14/docker-mods:transmission-gluetun-port-update
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    deploy:
      resources:
        limits:
          memory: 15G

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/jackett:/config
      - /mnt/media/completed:/downloads
    networks:
      - web
    expose:
      - 9117
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    depends_on:
      - transmission 
    restart: always

  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/prowlarr:/config:rw
    networks:
      - web
      - internal
    expose:
      - 9696
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/lidarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
      - internal
    expose:
      - 8686
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/sonarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
      - internal
    expose:
      - 8989
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/radarr:/config:rw
      - /mnt/media:/data:rw   
    networks:
      - web
      - internal
    expose:
      - 7878
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  huntarr:
    image: huntarr/huntarr
    container_name: huntarr
    restart: always
    networks:
      - web
    expose:
      - 9705
    volumes:
      - /mnt/homelab/huntarr:/config:rw
    environment:
      - TZ=${TZ}

  cleanuperr:
    image: ghcr.io/flmorg/cleanuperr:latest
    container_name: cleanuperr
    restart: always 
    networks:
      - internal
    volumes:
      - /mnt/media/completed:/downloads
    environment:
      - TZ=${TZ}
      - DRY_RUN=false
      - HTTP_MAX_RETRIES=0
      - HTTP_TIMEOUT=100
           
      - SEARCH_ENABLED=true
      - SEARCH_DELAY=30
      
      - TRIGGERS__QUEUECLEANER=0 0/5 * * * ?
      - QUEUECLEANER__ENABLED=true
      - QUEUECLEANER__RUNSEQUENTIALLY=true
      
      - QUEUECLEANER__IMPORT_FAILED_MAX_STRIKES=5
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_DELETE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__0=title mismatch
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__1=manual import required
      
      - QUEUECLEANER__STALLED_MAX_STRIKES=5
      - QUEUECLEANER__STALLED_RESET_STRIKES_ON_PROGRESS=true
      - QUEUECLEANER__STALLED_IGNORE_PRIVATE=false
      - QUEUECLEANER__STALLED_DELETE_PRIVATE=false
      - QUEUECLEANER__DOWNLOADING_METADATA_MAX_STRIKES=5
      
      - QUEUECLEANER__SLOW_MAX_STRIKES=5
      - QUEUECLEANER__SLOW_RESET_STRIKES_ON_PROGRESS=true
      - QUEUECLEANER__SLOW_IGNORE_PRIVATE=false
      - QUEUECLEANER__SLOW_DELETE_PRIVATE=false
      - QUEUECLEANER__SLOW_MIN_SPEED=1MB
      - QUEUECLEANER__SLOW_MAX_TIME=20
      - QUEUECLEANER__SLOW_IGNORE_ABOVE_SIZE=60GB
      
      - TRIGGERS__CONTENTBLOCKER=0 0/5 * * * ?
      - CONTENTBLOCKER__ENABLED=true
      - CONTENTBLOCKER__IGNORE_PRIVATE=false
      - CONTENTBLOCKER__DELETE_PRIVATE=false
      
      - TRIGGERS__DOWNLOADCLEANER=0 0 * * * ?
      - DOWNLOADCLEANER__ENABLED=true
      - DOWNLOADCLEANER__DELETE_PRIVATE=false
      
      - DOWNLOADCLEANER__CATEGORIES__0__NAME=tv-sonarr
      - DOWNLOADCLEANER__CATEGORIES__0__MAX_RATIO=2
      - DOWNLOADCLEANER__CATEGORIES__0__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__0__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__1__NAME=radarr
      - DOWNLOADCLEANER__CATEGORIES__1__MAX_RATIO=2
      - DOWNLOADCLEANER__CATEGORIES__1__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__1__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__2__NAME=lidarr
      - DOWNLOADCLEANER__CATEGORIES__2__MAX_RATIO=2
      - DOWNLOADCLEANER__CATEGORIES__2__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__2__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__3__NAME=readarr
      - DOWNLOADCLEANER__CATEGORIES__3__MAX_RATIO=2
      - DOWNLOADCLEANER__CATEGORIES__3__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__3__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__4__NAME=speakarr
      - DOWNLOADCLEANER__CATEGORIES__4__MAX_RATIO=2
      - DOWNLOADCLEANER__CATEGORIES__4__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__4__MAX_SEED_TIME=240
      - DOWNLOADCLEANER__CATEGORIES__5__NAME=cleanuperr-unlinked
      - DOWNLOADCLEANER__CATEGORIES__5__MAX_RATIO=1
      - DOWNLOADCLEANER__CATEGORIES__5__MIN_SEED_TIME=0
      - DOWNLOADCLEANER__CATEGORIES__5__MAX_SEED_TIME=240
      
      - DOWNLOADCLEANER__UNLINKED_TARGET_CATEGORY=cleanuperr-unlinked
      - DOWNLOADCLEANER__UNLINKED_USE_TAG=false
      - DOWNLOADCLEANER__UNLINKED_IGNORED_ROOT_DIR=/downloads
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__0=tv-sonarr
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__1=radarr
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__2=lidarr
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__3=readarr
      - DOWNLOADCLEANER__UNLINKED_CATEGORIES__4=speakarr
      
      - DOWNLOAD_CLIENT=transmission
      - TRANSMISSION__URL=http://gluetun:9091
      
      - SONARR__ENABLED=true
      - SONARR__IMPORT_FAILED_MAX_STRIKES=-1
      - SONARR__SEARCHTYPE=Episode
      - SONARR__INSTANCES__0__URL=http://sonarr:8989
      - SONARR__INSTANCES__0__APIKEY=${SONARR_API_KEY}
      
      - RADARR__ENABLED=true
      - RADARR__IMPORT_FAILED_MAX_STRIKES=-1
      - RADARR__INSTANCES__0__URL=http://radarr:7878
      - RADARR__INSTANCES__0__APIKEY=${RADARR_API_KEY}
      
      - LIDARR__ENABLED=true
      - LIDARR__IMPORT_FAILED_MAX_STRIKES=-1
      - LIDARR__INSTANCES__0__URL=http://lidarr:8686
      - LIDARR__INSTANCES__0__APIKEY=${LIDARR_API_KEY}

  speakarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: speakarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/speakarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
      - internal
    expose:
      - 8787
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    networks:
      - web
    expose:
      - 80
    volumes:
      - /mnt/media/audio_books:/audiobooks
      - /mnt/homelab/audiobookshelf/config:/config
      - /mnt/homelab/audiobookshelf/metadata:/metadata
    environment:
      - TZ=${TZ}

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/readarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
      - internal
    expose:
      - 8787
    depends_on:
      - transmission 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  calibre:
    image: lscr.io/linuxserver/calibre
    container_name: calibre
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/calibre:/config:rw
      - /mnt/media/books:/books:rw
    networks:
      - web
    expose:
      - 8080 # Desktop Gui
      - 8081 # Webserver Gui
    restart: always

  calibre-web:
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      #optional & x86-64 only Adds the ability to perform ebook conversion
      - DOCKER_MODS=linuxserver/mods:universal-calibre 
    volumes:
      - /mnt/homelab/calibre-web:/config:rw
      - /mnt/homelab/calibre:/calibre:rw
      - /mnt/media/books:/books:rw
    networks:
      - web
    expose:
      - 8083
    restart: always
    depends_on: 
      - calibre

  rathole:
    image: rapiz1/rathole
    container_name: rathole
    restart: always
    network_mode: host
    environment:
      - TZ=${TZ}
    volumes:
      - /home/core/compose-files/docker/rathole/rathole.toml:/app/config.toml:ro
    command: --client /app/config.toml

  traefik:
    image: traefik
    container_name: traefik
    restart: always
    environment:
      - CF_API_KEY=${CF_API_KEY}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - DNS=${DNS}
      - LEGO_DISABLE_CNAME_SUPPORT=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/core/acme/:/etc/traefik/acme:rw
      - /home/core/compose-files/docker/traefik/static.toml:/etc/traefik/traefik.toml:ro
      - /home/core/compose-files/docker/traefik/dynamic.toml:/etc/traefik/dynamic.toml:ro
      - /home/core/compose-files/docker/traefik/captcha.html:/captcha.html:ro
      - logs:/var/log/traefik
    networks:
      - web
      - dns
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
    expose:
      - "8080:8080"
    depends_on:
      - loki

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: always
    volumes:
      - /mnt/homelab/uptimekuma:/app/data
    networks:
      - web
    expose:
      - 3001

  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: always
    environment:
      - TZ=${TZ}
    # user: "1000:1000"
    networks:
      dns: 
        ipv4_address: 172.55.0.10 
    volumes:
      - /mnt/homelab/adgaurd:/opt/adguardhome/conf:rw
      - adguard-work:/opt/adguardhome/work:Z
      - /mnt/homelab/letsencrypt:/opt/adguardhome/certs/:ro
    expose:
      - 80 # webui
      - 53 # dns - not used
      - 853 # dot
      - 443 # doh

  lego:
    image: goacme/lego
    container_name: lego-certbot
    restart: always
    user: "1000:1000"
    environment:
      - TZ=${TZ}
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_API_KEY=${CF_API_KEY}
    command:
      --accept-tos
      --email ${CF_API_EMAIL} --dns cloudflare 
      --domains dns.${DOMAIN} --path /etc/letsencrypt/ 
      run
    volumes:
      - /mnt/homelab/letsencrypt:/etc/letsencrypt:rw

  unduck:
    image: ghcr.io/legitcamper/unduck
    container_name: unduck
    restart: always
    networks:
      - web
    expose:
      - 3000

  searxng:
    image: searxng/searxng
    container_name: searxng
    restart: always
    user: "1000:1000"
    environment:
      - TZ=${TZ}
      - SEARXNG_SECRET=${SEARXNG_SECRET}
    networks:
      - web
    expose:
      - 8080
    volumes:
      - /home/core/compose-files/docker/searxng:/etc/searxng:rw

  smokeping:
    image: lscr.io/linuxserver/smokeping
    container_name: smokeping
    environment:
      - TZ=${TZ}
    restart: always
    networks:
      - web
    expose:
      - 80

  languagetool:
    image: meyay/languagetool
    container_name: languagetool
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8010
    environment:
      TZ: ${TZ}
      download_ngrams_for_langs: en
      langtool_languageModel: /ngrams
      langtool_fasttextModel: /fasttext/lid.176.bin
    volumes:
      - /mnt/homelab/languagetool/ngrams:/ngrams:rw
      - /mnt/homelab/languagetool/fasttext:/fasttext:rw

  watchtower:
    image: ghcr.io/beatkind/watchtower:latest-dev
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      TZ: ${TZ}
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_REVIVE_STOPPED: true
      WATCHTOWER_POLL_INTERVAL: 604800 # every 7 days
    restart: always

  loki:
    image: grafana/loki:3.3.2
    container_name: loki
    environment:
      TZ: ${TZ}
    volumes:
      - /home/core/compose-files/docker/loki/:/mnt/config:ro
    command: -config.file=/mnt/config/config.yml
    networks:
      - internal
    expose:
     - 3100  
    restart: always

  promtail:
    container_name: promtail
    image: grafana/promtail:3.3.2
    environment:
      TZ: ${TZ}
    volumes:
      - /home/core/compose-files/docker/promtail:/mnt/config:ro
      - logs:/var/log:ro
    command: -config.file=/mnt/config/config.yml
    expose:
      - 9080
    networks:
      - internal
    depends_on:
      - loki
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana-enterprise 
    user: "1000:1000"
    environment:
      TZ: ${TZ}
    expose:
      - 3000
    networks:
      - internal
      - web
    volumes:
      - /mnt/homelab/grafana_data:/var/lib/grafana:rw
      - /home/core/compose-files/docker/grafana/:/etc/grafana/provisioning/datasources:rw
    depends_on:
      - loki
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    user: "1000:1000"
    environment:
      TZ: ${TZ}
    networks:
      - internal
    expose:
      - 9090
    restart: always
    volumes:
      - /home/core/compose-files/docker/prometheus:/etc/prometheus:ro
      - /mnt/homelab/prometheus:/prometheus:rw
    command:
      - --config.file=/etc/prometheus/config.yml
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - node_exporter

  node_exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node_exporter
    environment:
      TZ: ${TZ}
    command:
      - --path.rootfs=/host -–collector.systemd -–collector.processes
    networks:
      - internal
    expose:
      - 9100
    restart: always
    volumes:
      - /:/host:ro,rslave

  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter
    container_name: dcgm-exporter
    environment:
      TZ: ${TZ}
    networks:
      - internal
    expose:
      - 9400
    restart: always
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    privileged: true
    restart: always
    environment:
      TZ: ${TZ}
    expose:
      - 8080
    networks:
      - internal
    volumes:
      - /:/rootfs:ro 
      - /var/run:/var/run:ro 
      - /sys:/sys:ro 
      - /var/lib/docker/:/var/lib/docker:ro 
      - /dev/disk/:/dev/disk:ro 
    devices:
      - /dev/kmsg:/dev/kmsg

  portfolio:
    image: ghcr.io/legitcamper/portfolio-site
    container_name: portfolio
    restart: always
    networks:
      - web
    expose:
        - 8000

  mom-contact:
    image: ghcr.io/legitcamper/mom-contact
    container_name: mom-contact
    restart: always
    networks:
      - web
    expose:
        - 8000
