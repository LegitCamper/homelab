version: "3.4"

networks:
  web:
    external: true
  internal: # Not exposed via traefik (dbs & severices
    external: false
  # This network exists just so adugard can have a static ip for tcp routing
  dns:
    ipam:
      config:
        - subnet: 172.55.0.0/24

volumes:
  logs:
  uptimekuma:
  ollama-open-webui:
  jellyfin-config:
  jellyfin-cache:
  adguard-work:
  tdarr_cache:

services:
  ollama:
    image: ghcr.io/open-webui/open-webui:ollama
    container_name: ollama
    restart: always
    environment:
      - TZ=${TZ}
    networks:
      - web
    expose:
      - 8080 # ui
      - 11434 # api
    volumes:
      - /mnt/homelab/ollama:/root/.ollama:rw
      - ollama-open-webui:/app/backend/data:rw
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all
  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    restart: always
    networks:
      - web
    expose:
      - 8265 # webUI port
      - 8266 # server port
    environment:
      - TZ=${TZ}
      - PUID=1000
      - PGID=1000
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=7
      - nodeName=InternalNode
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - /mnt/homelab/tdarr/server:/app/server:rw
      - /mnt/homelab/tdarr/configs:/app/configs:rw
      - /mnt/homelab/tdarr/logs:/app/logs:rw
      - /mnt/media/movies:/media/movies:rw
      - /mnt/media/shows:/media/shows:rw
      - tdarr_cache:/temp:rw
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            capabilities: [gpu]
            count: all          

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8096
    volumes:
      - jellyfin-config:/config:rw
      - jellyfin-cache:/cache:rw
      - /mnt/media:/data/media/:rw
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          memory: 20G
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  flaresolverr:
    # use fork as flaresolverr is not working
    image: ghcr.io/yoori/flare-bypasser
    container_name: flaresolverr
    networks:
      - internal
    environment:
      UNUSED: "false"
      DEBUG: "false"
      VERBOSE: "true"
      SAVE_CHALLENGE_SCREENSHOTS: "true"
    expose:
      - 8080
    restart: always

  transmission-openvpn:
    image: haugene/transmission-openvpn
    container_name: transmission
    restart: always
    networks:
      - web
    volumes:
      - /mnt/media:/data:rw
    environment:
      - OPENVPN_OPTS=--pull-filter ignore ifconfig-ipv6
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - CREATE_TUN_DEVICE=true
    security_opt:
      - label=disable
    cap_add:
      - NET_ADMIN
      - MKNOD
    expose:
      - 9091 # transmission
      # any services proxied through this container need to declare ports here
    devices:
      - /dev/net/tun
    deploy:
      resources:
        limits:
          memory: 5G

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/jackett:/config
      - /mnt/media/completed:/downloads
    networks:
      - web
    expose:
      - 9117
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    depends_on:
      - transmission-openvpn 
    restart: always

  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/prowlarr:/config:rw
    networks:
      - web
      - internal
    expose:
      - 9696
    depends_on:
      - transmission-openvpn 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/lidarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
    expose:
      - 8686
    depends_on:
      - transmission-openvpn 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/sonarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
    expose:
      - 8989
    depends_on:
      - transmission-openvpn 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/radarr:/config:rw
      - /mnt/media:/data:rw   
    networks:
      - web
    expose:
      - 7878
    depends_on:
      - transmission-openvpn 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    user: 1000:1000 
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/readarr:/config:rw
      - /mnt/media:/data:rw
    networks:
      - web
    expose:
      - 8787
    depends_on:
      - transmission-openvpn 
    restart: always
    healthcheck: 
      test: curl -f http://localhost:9091 || exit 1
      interval: 5m00s
      timeout: 10s
      retries: 2

  calibre:
    image: lscr.io/linuxserver/calibre
    container_name: calibre
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - /mnt/homelab/calibre:/config:rw
      - /mnt/media/books:/books:rw
    networks:
      - web
    expose:
      - 8080 # Desktop Gui
      - 8081 # Webserver Gui
    restart: always

  calibre-web:
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      #optional & x86-64 only Adds the ability to perform ebook conversion
      - DOCKER_MODS=linuxserver/mods:universal-calibre 
    volumes:
      - /mnt/homelab/calibre-web:/config:rw
      - /mnt/homelab/calibre:/calibre:rw
      - /mnt/media/books:/books:rw
    networks:
      - web
    expose:
      - 8083
    restart: always
    depends_on: 
      - calibre

  yt-dlp-webui:
    image: marcobaobao/yt-dlp-webui
    container_name: yt-dlp-webui
    environment:
      - TZ=${TZ}
    networks:
      - web
    expose:
      - 3033
    volumes:
      - /mnt/media/yt-dlp:/downloads:rw
    healthcheck:
      test: curl -f http://localhost:3033 || exit 1
    restart: always

  rathole:
    image: rapiz1/rathole
    container_name: rathole
    restart: always
    network_mode: host
    environment:
      - TZ=${TZ}
    volumes:
      - /home/core/compose-files/docker/rathole/rathole.toml:/app/config.toml:ro
    command: --client /app/config.toml

  traefik:
    image: traefik
    container_name: traefik
    restart: always
    environment:
      - CF_API_KEY=${CF_API_KEY}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - DNS=${DNS}
      - LEGO_DISABLE_CNAME_SUPPORT=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/core/acme/:/etc/traefik/acme:rw
      - /home/core/compose-files/docker/traefik/static.toml:/etc/traefik/traefik.toml:ro
      - /home/core/compose-files/docker/traefik/dynamic.toml:/etc/traefik/dynamic.toml:ro
      - /home/core/compose-files/docker/traefik/captcha.html:/captcha.html:ro
      - logs:/var/log/traefik
    extra_hosts:
      # - "homeserver.dunker-arctic.ts.net:24.199.78.82"
      - "ollama.internal.sawyer.services:24.199.78.82"
      - "tdarr.internal.sawyer.services:24.199.78.82"
      - "bevbot.internal.sawyer.services:24.199.78.82"
      - "jackett.internal.sawyer.services:24.199.78.82"
      - "calibre.internal.sawyer.services:24.199.78.82"
    networks:
      - web
      - dns
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
    expose:
      - "8080:8080"
    depends_on:
      - loki

  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: always
    environment:
      - TZ=${TZ}
    # user: "1000:1000"
    networks:
      dns: 
        ipv4_address: 172.55.0.10 
    volumes:
      - /mnt/homelab/adgaurd:/opt/adguardhome/conf:rw
      - adguard-work:/opt/adguardhome/work:Z
      - /mnt/homelab/letsencrypt:/opt/adguardhome/certs/:ro
    expose:
      - 80 # webui
      - 53 # dns - not used
      - 853 # dot
      - 443 # doh

  lego:
    image: goacme/lego
    container_name: lego-certbot
    restart: always
    user: "1000:1000"
    environment:
      - TZ=${TZ}
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_API_KEY=${CF_API_KEY}
    command:
      --accept-tos
      --email ${CF_API_EMAIL} --dns cloudflare 
      --domains dns.${DOMAIN} --path /etc/letsencrypt/ 
      run
    volumes:
      - /mnt/homelab/letsencrypt:/etc/letsencrypt:rw

  unduck:
    image: ghcr.io/legitcamper/unduck
    container_name: unduck
    restart: always
    networks:
      - web
    expose:
      - 3000

  searxng:
    image: searxng/searxng
    container_name: searxng
    restart: always
    user: "1000:1000"
    environment:
      - TZ=${TZ}
      - SEARXNG_SECRET=${SEARXNG_SECRET}
    networks:
      - web
    expose:
      - 8080
    volumes:
      - /home/core/compose-files/docker/searxng:/etc/searxng:rw

  smokeping:
    image: lscr.io/linuxserver/smokeping
    container_name: smokeping
    environment:
      - TZ=${TZ}
    restart: always
    networks:
      - web
    expose:
      - 80

  languagetool:
    image: meyay/languagetool
    container_name: languagetool
    restart: always
    user: "1000:1000"
    networks:
      - web
    expose:
      - 8010
    environment:
      TZ: ${TZ}
      download_ngrams_for_langs: en
      langtool_languageModel: /ngrams
      langtool_fasttextModel: /fasttext/lid.176.bin
    volumes:
      - /mnt/homelab/languagetool/ngrams:/ngrams:rw
      - /mnt/homelab/languagetool/fasttext:/fasttext:rw

  watchtower:
    image: ghcr.io/beatkind/watchtower:latest-dev
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      TZ: ${TZ}
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_REVIVE_STOPPED: true
      WATCHTOWER_POLL_INTERVAL: 604800 # every 7 days
    restart: always

  loki:
    image: grafana/loki:3.3.2
    container_name: loki
    environment:
      TZ: ${TZ}
    volumes:
      - /home/core/compose-files/docker/loki/:/mnt/config:ro
    command: -config.file=/mnt/config/config.yml
    networks:
      - internal
    expose:
     - 3100  
    restart: always

  promtail:
    container_name: promtail
    image: grafana/promtail:3.3.2
    environment:
      TZ: ${TZ}
    volumes:
      - /home/core/compose-files/docker/promtail:/mnt/config:ro
      - logs:/var/log:ro
    command: -config.file=/mnt/config/config.yml
    expose:
      - 9080
    networks:
      - internal
    depends_on:
      - loki
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana-enterprise 
    user: "1000:1000"
    environment:
      TZ: ${TZ}
    expose:
      - 3000
    networks:
      - internal
      - web
    volumes:
      - /mnt/homelab/grafana_data:/var/lib/grafana:rw
      - /home/core/compose-files/docker/grafana/:/etc/grafana/provisioning/datasources:rw
    depends_on:
      - loki
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    user: "1000:1000"
    environment:
      TZ: ${TZ}
    networks:
      - internal
    expose:
      - 9090
    restart: always
    volumes:
      - /home/core/compose-files/docker/prometheus:/etc/prometheus:ro
      - /mnt/homelab/prometheus:/prometheus:rw
    command:
      - --config.file=/etc/prometheus/config.yml
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - node_exporter

  node_exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node_exporter
    environment:
      TZ: ${TZ}
    command:
      - --path.rootfs=/host -–collector.systemd -–collector.processes
    networks:
      - internal
    expose:
      - 9100
    restart: always
    volumes:
      - /:/host:ro,rslave

  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter
    container_name: dcgm-exporter
    environment:
      TZ: ${TZ}
    networks:
      - internal
    expose:
      - 9400
    restart: always
    security_opt:
      - label=type:nvidia_container_t
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
              count: all

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    privileged: true
    restart: always
    environment:
      TZ: ${TZ}
    expose:
      - 8080
    networks:
      - internal
    volumes:
      - /:/rootfs:ro 
      - /var/run:/var/run:ro 
      - /sys:/sys:ro 
      - /var/lib/docker/:/var/lib/docker:ro 
      - /dev/disk/:/dev/disk:ro 
    devices:
      - /dev/kmsg:/dev/kmsg

  portfolio:
    image: ghcr.io/legitcamper/portfolio-site
    container_name: portfolio
    restart: always
    networks:
      - web
    expose:
        - 8000

  mom-contact:
    image: ghcr.io/legitcamper/mom-contact
    container_name: mom-contact
    restart: always
    networks:
      - web
    expose:
        - 8000
